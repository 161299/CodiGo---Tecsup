import { InjectionToken, Inject, Injectable, NgModule } from '@angular/core';
import { Observable, from, EMPTY } from 'rxjs';
import { map } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const /** @type {?} */ CONFIG = new InjectionToken('providers configuration');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @abstract
 */
class OauthProvider {
    /**
     * @param {?} provider
     * @param {?} src
     * @param {?} onload
     * @param {?=} async
     */
    constructor(provider, src, onload, async = true) {
        this.ID_PREFIX = 'social-login__';
        const /** @type {?} */ id = this.ID_PREFIX + provider;
        if (document.getElementById(id)) {
            return;
        }
        const /** @type {?} */ script = document.createElement('script');
        script.id = id;
        script.async = async;
        script.src = src;
        script.onload = onload;
        script.defer = true;
        document.head.appendChild(script);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/** @enum {string} */
const Provider = {
    FACEBOOK: 'facebook',
    GOOGLE: 'google',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class FacebookProvider extends OauthProvider {
    /**
     * @param {?} _config
     */
    constructor(_config) {
        super(Provider.FACEBOOK, '//connect.facebook.net/en_US/sdk.js', () => {
            const /** @type {?} */ initConfig = this._config.initOptions;
            const /** @type {?} */ config = initConfig.version ? initConfig : Object.assign({}, initConfig, { version: 'v2.9' });
            FB.init(config);
        });
        this._config = _config;
    }
    /**
     * @return {?}
     */
    login() {
        return Observable.create(observer => {
            FB.login((response) => {
                if (response.authResponse) {
                    const /** @type {?} */ authResponse = response.authResponse;
                    FB.api('/me?fields=name,email,picture,first_name,last_name', (fbUser) => {
                        observer.complete(/** @type {?} */ ({
                            id: fbUser.id,
                            name: fbUser.name,
                            email: fbUser.email,
                            profileImg: `https://graph.facebook.com/${fbUser.id}/picture?type=normal`,
                            firstName: fbUser.first_name,
                            lastName: fbUser.last_name,
                            accessToken: authResponse.accessToken
                        }));
                    });
                }
            }, this._config.loginOptions);
        });
    }
    /**
     * @return {?}
     */
    logout() {
        return Observable.create(observer => observer.complete(FB.logout()));
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class GoogleProvider extends OauthProvider {
    /**
     * @param {?} config
     */
    constructor(config) {
        super(Provider.GOOGLE, '//apis.google.com/js/platform.js', () => {
            gapi.load('auth2', () => {
                const /** @type {?} */ conf = !config.scope ? Object.assign({}, config, { scope: 'email' }) : config;
                gapi.auth2
                    .init(conf)
                    .then(auth => (this._googleAuth = auth))
                    .catch(err => {
                    throw new Error(`Something went wrong during initialization: ${err.details}`);
                });
            });
        });
    }
    /**
     * @return {?}
     */
    login() {
        return from(this._googleAuth.signIn({ prompt: 'select_account' })).pipe(map(() => {
            const /** @type {?} */ profile = this._googleAuth.currentUser.get().getBasicProfile();
            const /** @type {?} */ accessToken = this._googleAuth.currentUser.get().getAuthResponse(true).access_token;
            const /** @type {?} */ idToken = this._googleAuth.currentUser.get().getAuthResponse(true).id_token;
            return {
                id: profile.getId(),
                email: profile.getEmail(),
                name: profile.getName(),
                profileImg: profile.getImageUrl(),
                accessToken: accessToken,
                idToken: idToken
            };
        }));
    }
    /**
     * @return {?}
     */
    logout() {
        return Observable.create(observer => observer.complete(this._googleAuth.signOut()));
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class SocialLoginService {
    /**
     * @param {?} config
     */
    constructor(config) {
        this._providers = {};
        this._providers = Object.keys(config).reduce((obj, providerId) => {
            const /** @type {?} */ provider = Provider[providerId.toUpperCase()];
            obj[provider] = this.oauthProviderFactory(provider, config[providerId]);
            return obj;
        }, {});
    }
    /**
     * @param {?} provider
     * @return {?}
     */
    login(provider) {
        this._providerInUse = provider;
        const /** @type {?} */ oauthProvider = this._providers[provider];
        return oauthProvider ? oauthProvider.login() : EMPTY;
    }
    /**
     * @return {?}
     */
    logout() {
        const /** @type {?} */ oauthProvider = this._providers[this._providerInUse];
        return oauthProvider ? oauthProvider.logout() : EMPTY;
    }
    /**
     * @param {?} provider
     * @param {?} config
     * @return {?}
     */
    oauthProviderFactory(provider, config) {
        switch (provider) {
            case Provider.FACEBOOK:
                return new FacebookProvider(/** @type {?} */ (config));
            case Provider.GOOGLE:
                return new GoogleProvider(/** @type {?} */ (config));
        }
    }
}
SocialLoginService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
SocialLoginService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [CONFIG,] }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NgxSocialLoginModule {
    /**
     * @param {?} config
     * @return {?}
     */
    static init(config) {
        return {
            ngModule: NgxSocialLoginModule,
            providers: [
                { provide: CONFIG, useValue: config }
            ]
        };
    }
}
NgxSocialLoginModule.decorators = [
    { type: NgModule, args: [{
                providers: [SocialLoginService]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { SocialLoginService, NgxSocialLoginModule, Provider, CONFIG as Éµa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXNvY2lhbC1sb2dpbi5qcy5tYXAiLCJzb3VyY2VzIjpbIm5nOi8vbmd4LXNvY2lhbC1sb2dpbi9saWIvbW9kZWxzL2NvbmZpZy1pbmplY3Rpb24tdG9rZW4udHMiLCJuZzovL25neC1zb2NpYWwtbG9naW4vbGliL3Byb3ZpZGVycy9vYXV0aC1wcm92aWRlci50cyIsIm5nOi8vbmd4LXNvY2lhbC1sb2dpbi9saWIvbW9kZWxzL3Byb3ZpZGVyLnRzIiwibmc6Ly9uZ3gtc29jaWFsLWxvZ2luL2xpYi9wcm92aWRlcnMvZmFjZWJvb2stcHJvdmlkZXIudHMiLCJuZzovL25neC1zb2NpYWwtbG9naW4vbGliL3Byb3ZpZGVycy9nb29nbGUtcHJvdmlkZXIudHMiLCJuZzovL25neC1zb2NpYWwtbG9naW4vbGliL3NlcnZpY2VzL3NvY2lhbC1sb2dpbi5zZXJ2aWNlLnRzIiwibmc6Ly9uZ3gtc29jaWFsLWxvZ2luL2xpYi9uZ3gtc29jaWFsLWxvZ2luLm1vZHVsZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGlvblRva2VufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7UHJvdmlkZXJDb25maWd9IGZyb20gJy4vY29uZmlnL3Byb3ZpZGVyLWNvbmZpZyc7XG5cbmV4cG9ydCBjb25zdCBDT05GSUc6IEluamVjdGlvblRva2VuPFByb3ZpZGVyQ29uZmlnPiA9IG5ldyBJbmplY3Rpb25Ub2tlbjxQcm92aWRlckNvbmZpZz4oJ3Byb3ZpZGVycyBjb25maWd1cmF0aW9uJyk7XG4iLCJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBQcm92aWRlciB9IGZyb20gJy4uL21vZGVscy9wcm92aWRlcic7XG5pbXBvcnQgeyBTb2NpYWxVc2VyIH0gZnJvbSAnLi4vbW9kZWxzL3NvY2lhbC11c2VyJztcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIE9hdXRoUHJvdmlkZXIge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgSURfUFJFRklYID0gJ3NvY2lhbC1sb2dpbl9fJztcblxuICAgIGNvbnN0cnVjdG9yKHByb3ZpZGVyOiBQcm92aWRlciwgc3JjOiBzdHJpbmcsIG9ubG9hZDogKCkgPT4gdm9pZCwgYXN5bmMgPSB0cnVlKSB7XG4gICAgICAgIGNvbnN0IGlkID0gdGhpcy5JRF9QUkVGSVggKyBwcm92aWRlcjtcblxuICAgICAgICBpZiAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICAgICAgc2NyaXB0LmlkID0gaWQ7XG4gICAgICAgIHNjcmlwdC5hc3luYyA9IGFzeW5jO1xuICAgICAgICBzY3JpcHQuc3JjID0gc3JjO1xuICAgICAgICBzY3JpcHQub25sb2FkID0gb25sb2FkO1xuICAgICAgICBzY3JpcHQuZGVmZXIgPSB0cnVlO1xuICAgICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gICAgfVxuXG4gICAgYWJzdHJhY3QgbG9naW4oKTogT2JzZXJ2YWJsZTxTb2NpYWxVc2VyPjtcblxuICAgIGFic3RyYWN0IGxvZ291dCgpOiBPYnNlcnZhYmxlPGFueT47XG59XG4iLCJleHBvcnQgZW51bSBQcm92aWRlciB7XG4gICAgRkFDRUJPT0sgPSAnZmFjZWJvb2snLFxuICAgIEdPT0dMRSA9ICdnb29nbGUnXG59XG4iLCJpbXBvcnQgeyBPYXV0aFByb3ZpZGVyIH0gZnJvbSAnLi9vYXV0aC1wcm92aWRlcic7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBGYWNlYm9va1Byb3ZpZGVyQ29uZmlnIH0gZnJvbSAnLi4vbW9kZWxzL2NvbmZpZy9mYWNlYm9vay1wcm92aWRlci1jb25maWcnO1xuaW1wb3J0IHsgU29jaWFsVXNlciB9IGZyb20gJy4uL21vZGVscy9zb2NpYWwtdXNlcic7XG5pbXBvcnQgeyBQcm92aWRlciB9IGZyb20gJy4uL21vZGVscy9wcm92aWRlcic7XG5cbmRlY2xhcmUgY29uc3QgRkI6IGFueTtcblxuZXhwb3J0IGNsYXNzIEZhY2Vib29rUHJvdmlkZXIgZXh0ZW5kcyBPYXV0aFByb3ZpZGVyIHtcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9jb25maWc6IEZhY2Vib29rUHJvdmlkZXJDb25maWcpIHtcbiAgICAgICAgc3VwZXIoUHJvdmlkZXIuRkFDRUJPT0ssICcvL2Nvbm5lY3QuZmFjZWJvb2submV0L2VuX1VTL3Nkay5qcycsICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGluaXRDb25maWcgPSB0aGlzLl9jb25maWcuaW5pdE9wdGlvbnM7XG4gICAgICAgICAgICBjb25zdCBjb25maWcgPSBpbml0Q29uZmlnLnZlcnNpb24gPyBpbml0Q29uZmlnIDogeyAuLi5pbml0Q29uZmlnLCAuLi57IHZlcnNpb246ICd2Mi45JyB9IH07XG4gICAgICAgICAgICBGQi5pbml0KGNvbmZpZyk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGxvZ2luKCk6IE9ic2VydmFibGU8U29jaWFsVXNlcj4ge1xuICAgICAgICByZXR1cm4gT2JzZXJ2YWJsZS5jcmVhdGUob2JzZXJ2ZXIgPT4ge1xuICAgICAgICAgICAgRkIubG9naW4oKHJlc3BvbnNlOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuYXV0aFJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGF1dGhSZXNwb25zZSA9IHJlc3BvbnNlLmF1dGhSZXNwb25zZTtcbiAgICAgICAgICAgICAgICAgICAgRkIuYXBpKCcvbWU/ZmllbGRzPW5hbWUsZW1haWwscGljdHVyZSxmaXJzdF9uYW1lLGxhc3RfbmFtZScsIChmYlVzZXI6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBmYlVzZXIuaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogZmJVc2VyLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW1haWw6IGZiVXNlci5lbWFpbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9maWxlSW1nOiBgaHR0cHM6Ly9ncmFwaC5mYWNlYm9vay5jb20vJHtmYlVzZXIuaWR9L3BpY3R1cmU/dHlwZT1ub3JtYWxgLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0TmFtZTogZmJVc2VyLmZpcnN0X25hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdE5hbWU6IGZiVXNlci5sYXN0X25hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjZXNzVG9rZW46IGF1dGhSZXNwb25zZS5hY2Nlc3NUb2tlblxuICAgICAgICAgICAgICAgICAgICAgICAgfSBhcyBTb2NpYWxVc2VyKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgdGhpcy5fY29uZmlnLmxvZ2luT3B0aW9ucyk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGxvZ291dCgpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgICAgICByZXR1cm4gT2JzZXJ2YWJsZS5jcmVhdGUob2JzZXJ2ZXIgPT4gb2JzZXJ2ZXIuY29tcGxldGUoRkIubG9nb3V0KCkpKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBPYnNlcnZhYmxlLCBmcm9tIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBPYXV0aFByb3ZpZGVyIH0gZnJvbSAnLi9vYXV0aC1wcm92aWRlcic7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBHb29nbGVQcm92aWRlckNvbmZpZyB9IGZyb20gJy4uL21vZGVscy9jb25maWcvZ29vZ2xlLXByb3ZpZGVyLWNvbmZpZyc7XG5pbXBvcnQgeyBQcm92aWRlciB9IGZyb20gJy4uL21vZGVscy9wcm92aWRlcic7XG5pbXBvcnQgeyBTb2NpYWxVc2VyIH0gZnJvbSAnLi4vbW9kZWxzL3NvY2lhbC11c2VyJztcblxuZGVjbGFyZSBjb25zdCBnYXBpOiBhbnk7XG5cbmV4cG9ydCBjbGFzcyBHb29nbGVQcm92aWRlciBleHRlbmRzIE9hdXRoUHJvdmlkZXIge1xuICAgIHByaXZhdGUgX2dvb2dsZUF1dGg6IGFueTtcblxuICAgIGNvbnN0cnVjdG9yKGNvbmZpZzogR29vZ2xlUHJvdmlkZXJDb25maWcpIHtcbiAgICAgICAgc3VwZXIoUHJvdmlkZXIuR09PR0xFLCAnLy9hcGlzLmdvb2dsZS5jb20vanMvcGxhdGZvcm0uanMnLCAoKSA9PiB7XG4gICAgICAgICAgICBnYXBpLmxvYWQoJ2F1dGgyJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbmYgPSAhY29uZmlnLnNjb3BlID8geyAuLi5jb25maWcsIC4uLnsgc2NvcGU6ICdlbWFpbCcgfSB9IDogY29uZmlnO1xuICAgICAgICAgICAgICAgIGdhcGkuYXV0aDJcbiAgICAgICAgICAgICAgICAgICAgLmluaXQoY29uZilcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oYXV0aCA9PiAodGhpcy5fZ29vZ2xlQXV0aCA9IGF1dGgpKVxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgU29tZXRoaW5nIHdlbnQgd3JvbmcgZHVyaW5nIGluaXRpYWxpemF0aW9uOiAke2Vyci5kZXRhaWxzfWApO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBsb2dpbigpOiBPYnNlcnZhYmxlPFNvY2lhbFVzZXI+IHtcbiAgICAgICAgcmV0dXJuIGZyb20odGhpcy5fZ29vZ2xlQXV0aC5zaWduSW4oeyBwcm9tcHQ6ICdzZWxlY3RfYWNjb3VudCcgfSkpLnBpcGUoXG4gICAgICAgICAgICBtYXAoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHByb2ZpbGUgPSB0aGlzLl9nb29nbGVBdXRoLmN1cnJlbnRVc2VyLmdldCgpLmdldEJhc2ljUHJvZmlsZSgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGFjY2Vzc1Rva2VuID0gdGhpcy5fZ29vZ2xlQXV0aC5jdXJyZW50VXNlci5nZXQoKS5nZXRBdXRoUmVzcG9uc2UodHJ1ZSkuYWNjZXNzX3Rva2VuO1xuICAgICAgICAgICAgICAgIGNvbnN0IGlkVG9rZW4gPSB0aGlzLl9nb29nbGVBdXRoLmN1cnJlbnRVc2VyLmdldCgpLmdldEF1dGhSZXNwb25zZSh0cnVlKS5pZF90b2tlbjtcblxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGlkOiBwcm9maWxlLmdldElkKCksXG4gICAgICAgICAgICAgICAgICAgIGVtYWlsOiBwcm9maWxlLmdldEVtYWlsKCksXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IHByb2ZpbGUuZ2V0TmFtZSgpLFxuICAgICAgICAgICAgICAgICAgICBwcm9maWxlSW1nOiBwcm9maWxlLmdldEltYWdlVXJsKCksXG4gICAgICAgICAgICAgICAgICAgIGFjY2Vzc1Rva2VuOiBhY2Nlc3NUb2tlbixcbiAgICAgICAgICAgICAgICAgICAgaWRUb2tlbjogaWRUb2tlblxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGxvZ291dCgpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgICAgICByZXR1cm4gT2JzZXJ2YWJsZS5jcmVhdGUob2JzZXJ2ZXIgPT4gb2JzZXJ2ZXIuY29tcGxldGUodGhpcy5fZ29vZ2xlQXV0aC5zaWduT3V0KCkpKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9hdXRoUHJvdmlkZXIgfSBmcm9tICcuLi9wcm92aWRlcnMvb2F1dGgtcHJvdmlkZXInO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgRU1QVFkgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFByb3ZpZGVyQ29uZmlnIH0gZnJvbSAnLi4vbW9kZWxzL2NvbmZpZy9wcm92aWRlci1jb25maWcnO1xuaW1wb3J0IHsgQ09ORklHIH0gZnJvbSAnLi4vbW9kZWxzL2NvbmZpZy1pbmplY3Rpb24tdG9rZW4nO1xuaW1wb3J0IHsgRmFjZWJvb2tQcm92aWRlciB9IGZyb20gJy4uL3Byb3ZpZGVycy9mYWNlYm9vay1wcm92aWRlcic7XG5pbXBvcnQgeyBGYWNlYm9va1Byb3ZpZGVyQ29uZmlnIH0gZnJvbSAnLi4vbW9kZWxzL2NvbmZpZy9mYWNlYm9vay1wcm92aWRlci1jb25maWcnO1xuaW1wb3J0IHsgR29vZ2xlUHJvdmlkZXJDb25maWcgfSBmcm9tICcuLi9tb2RlbHMvY29uZmlnL2dvb2dsZS1wcm92aWRlci1jb25maWcnO1xuaW1wb3J0IHsgR29vZ2xlUHJvdmlkZXIgfSBmcm9tICcuLi9wcm92aWRlcnMvZ29vZ2xlLXByb3ZpZGVyJztcbmltcG9ydCB7IFByb3ZpZGVyIH0gZnJvbSAnLi4vbW9kZWxzL3Byb3ZpZGVyJztcbmltcG9ydCB7IFNvY2lhbFVzZXIgfSBmcm9tICcuLi9tb2RlbHMvc29jaWFsLXVzZXInO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgU29jaWFsTG9naW5TZXJ2aWNlIHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9wcm92aWRlcnM6IHsgW3Byb3ZpZGVySWQ6IHN0cmluZ106IE9hdXRoUHJvdmlkZXIgfSA9IHt9O1xuXG4gICAgcHJpdmF0ZSBfcHJvdmlkZXJJblVzZTogUHJvdmlkZXI7XG5cbiAgICBjb25zdHJ1Y3RvcihASW5qZWN0KENPTkZJRykgY29uZmlnOiBQcm92aWRlckNvbmZpZykge1xuICAgICAgICB0aGlzLl9wcm92aWRlcnMgPSBPYmplY3Qua2V5cyhjb25maWcpLnJlZHVjZSgob2JqLCBwcm92aWRlcklkKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBwcm92aWRlciA9IFByb3ZpZGVyW3Byb3ZpZGVySWQudG9VcHBlckNhc2UoKV07XG4gICAgICAgICAgICBvYmpbcHJvdmlkZXJdID0gdGhpcy5vYXV0aFByb3ZpZGVyRmFjdG9yeShwcm92aWRlciwgY29uZmlnW3Byb3ZpZGVySWRdKTtcbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH0sIHt9KTtcbiAgICB9XG5cbiAgICBsb2dpbihwcm92aWRlcjogUHJvdmlkZXIpOiBPYnNlcnZhYmxlPFNvY2lhbFVzZXI+IHtcbiAgICAgICAgdGhpcy5fcHJvdmlkZXJJblVzZSA9IHByb3ZpZGVyO1xuICAgICAgICBjb25zdCBvYXV0aFByb3ZpZGVyID0gdGhpcy5fcHJvdmlkZXJzW3Byb3ZpZGVyXTtcbiAgICAgICAgcmV0dXJuIG9hdXRoUHJvdmlkZXIgPyBvYXV0aFByb3ZpZGVyLmxvZ2luKCkgOiBFTVBUWTtcbiAgICB9XG5cbiAgICBsb2dvdXQoKTogT2JzZXJ2YWJsZTxTb2NpYWxVc2VyPiB7XG4gICAgICAgIGNvbnN0IG9hdXRoUHJvdmlkZXIgPSB0aGlzLl9wcm92aWRlcnNbdGhpcy5fcHJvdmlkZXJJblVzZV07XG4gICAgICAgIHJldHVybiBvYXV0aFByb3ZpZGVyID8gb2F1dGhQcm92aWRlci5sb2dvdXQoKSA6IEVNUFRZO1xuICAgIH1cblxuICAgIHByaXZhdGUgb2F1dGhQcm92aWRlckZhY3RvcnkoXG4gICAgICAgIHByb3ZpZGVyOiBQcm92aWRlcixcbiAgICAgICAgY29uZmlnOiBHb29nbGVQcm92aWRlckNvbmZpZyB8IEZhY2Vib29rUHJvdmlkZXJDb25maWdcbiAgICApOiBPYXV0aFByb3ZpZGVyIHtcbiAgICAgICAgc3dpdGNoIChwcm92aWRlcikge1xuICAgICAgICAgICAgY2FzZSBQcm92aWRlci5GQUNFQk9PSzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEZhY2Vib29rUHJvdmlkZXIoY29uZmlnIGFzIEZhY2Vib29rUHJvdmlkZXJDb25maWcpO1xuICAgICAgICAgICAgY2FzZSBQcm92aWRlci5HT09HTEU6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBHb29nbGVQcm92aWRlcihjb25maWcgYXMgR29vZ2xlUHJvdmlkZXJDb25maWcpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHtNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1NvY2lhbExvZ2luU2VydmljZX0gZnJvbSAnLi9zZXJ2aWNlcy9zb2NpYWwtbG9naW4uc2VydmljZSc7XG5pbXBvcnQge1Byb3ZpZGVyQ29uZmlnfSBmcm9tICcuL21vZGVscy9jb25maWcvcHJvdmlkZXItY29uZmlnJztcbmltcG9ydCB7Q09ORklHfSBmcm9tICcuL21vZGVscy9jb25maWctaW5qZWN0aW9uLXRva2VuJztcblxuQE5nTW9kdWxlKHtcbiAgICBwcm92aWRlcnM6IFtTb2NpYWxMb2dpblNlcnZpY2VdXG59KVxuZXhwb3J0IGNsYXNzIE5neFNvY2lhbExvZ2luTW9kdWxlIHtcblxuICAgIHN0YXRpYyBpbml0KGNvbmZpZzogUHJvdmlkZXJDb25maWcpOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5nTW9kdWxlOiBOZ3hTb2NpYWxMb2dpbk1vZHVsZSxcbiAgICAgICAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICAgICAgICAgIHtwcm92aWRlOiBDT05GSUcsIHVzZVZhbHVlOiBjb25maWd9XG4gICAgICAgICAgICBdXG4gICAgICAgIH07XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsdUJBR2EsTUFBTSxHQUFtQyxJQUFJLGNBQWMsQ0FBaUIseUJBQXlCLENBQUM7Ozs7Ozs7OztBQ0NuSDs7Ozs7OztJQUdJLFlBQVksUUFBa0IsRUFB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