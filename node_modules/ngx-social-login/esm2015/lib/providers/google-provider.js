/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Observable, from } from 'rxjs';
import { OauthProvider } from './oauth-provider';
import { map } from 'rxjs/operators';
import { Provider } from '../models/provider';
export class GoogleProvider extends OauthProvider {
    /**
     * @param {?} config
     */
    constructor(config) {
        super(Provider.GOOGLE, '//apis.google.com/js/platform.js', () => {
            gapi.load('auth2', () => {
                const /** @type {?} */ conf = !config.scope ? Object.assign({}, config, { scope: 'email' }) : config;
                gapi.auth2
                    .init(conf)
                    .then(auth => (this._googleAuth = auth))
                    .catch(err => {
                    throw new Error(`Something went wrong during initialization: ${err.details}`);
                });
            });
        });
    }
    /**
     * @return {?}
     */
    login() {
        return from(this._googleAuth.signIn({ prompt: 'select_account' })).pipe(map(() => {
            const /** @type {?} */ profile = this._googleAuth.currentUser.get().getBasicProfile();
            const /** @type {?} */ accessToken = this._googleAuth.currentUser.get().getAuthResponse(true).access_token;
            const /** @type {?} */ idToken = this._googleAuth.currentUser.get().getAuthResponse(true).id_token;
            return {
                id: profile.getId(),
                email: profile.getEmail(),
                name: profile.getName(),
                profileImg: profile.getImageUrl(),
                accessToken: accessToken,
                idToken: idToken
            };
        }));
    }
    /**
     * @return {?}
     */
    logout() {
        return Observable.create(observer => observer.complete(this._googleAuth.signOut()));
    }
}
function GoogleProvider_tsickle_Closure_declarations() {
    /** @type {?} */
    GoogleProvider.prototype._googleAuth;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ29vZ2xlLXByb3ZpZGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXNvY2lhbC1sb2dpbi8iLCJzb3VyY2VzIjpbImxpYi9wcm92aWRlcnMvZ29vZ2xlLXByb3ZpZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN4QyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDakQsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXJDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUs5QyxNQUFNLHFCQUFzQixTQUFRLGFBQWE7Ozs7SUFHN0MsWUFBWSxNQUE0QjtRQUNwQyxLQUFLLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxrQ0FBa0MsRUFBRSxHQUFHLEVBQUU7WUFDNUQsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFO2dCQUNwQix1QkFBTSxJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsbUJBQU0sTUFBTSxFQUFLLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxFQUFHLENBQUMsQ0FBQyxNQUFNLENBQUM7Z0JBQzNFLElBQUksQ0FBQyxLQUFLO3FCQUNMLElBQUksQ0FBQyxJQUFJLENBQUM7cUJBQ1YsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxDQUFDO3FCQUN2QyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUU7b0JBQ1QsTUFBTSxJQUFJLEtBQUssQ0FBQywrQ0FBK0MsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7aUJBQ2pGLENBQUMsQ0FBQzthQUNWLENBQUMsQ0FBQztTQUNOLENBQUMsQ0FBQztLQUNOOzs7O0lBRUQsS0FBSztRQUNELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsRUFBRSxNQUFNLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUNuRSxHQUFHLENBQUMsR0FBRyxFQUFFO1lBQ0wsdUJBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRSxDQUFDLGVBQWUsRUFBRSxDQUFDO1lBQ3JFLHVCQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUMsWUFBWSxDQUFDO1lBQzFGLHVCQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDO1lBRWxGLE1BQU0sQ0FBQztnQkFDSCxFQUFFLEVBQUUsT0FBTyxDQUFDLEtBQUssRUFBRTtnQkFDbkIsS0FBSyxFQUFFLE9BQU8sQ0FBQyxRQUFRLEVBQUU7Z0JBQ3pCLElBQUksRUFBRSxPQUFPLENBQUMsT0FBTyxFQUFFO2dCQUN2QixVQUFVLEVBQUUsT0FBTyxDQUFDLFdBQVcsRUFBRTtnQkFDakMsV0FBVyxFQUFFLFdBQVc7Z0JBQ3hCLE9BQU8sRUFBRSxPQUFPO2FBQ25CLENBQUM7U0FDTCxDQUFDLENBQ0wsQ0FBQztLQUNMOzs7O0lBRUQsTUFBTTtRQUNGLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQztLQUN2RjtDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSwgZnJvbSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgT2F1dGhQcm92aWRlciB9IGZyb20gJy4vb2F1dGgtcHJvdmlkZXInO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgR29vZ2xlUHJvdmlkZXJDb25maWcgfSBmcm9tICcuLi9tb2RlbHMvY29uZmlnL2dvb2dsZS1wcm92aWRlci1jb25maWcnO1xuaW1wb3J0IHsgUHJvdmlkZXIgfSBmcm9tICcuLi9tb2RlbHMvcHJvdmlkZXInO1xuaW1wb3J0IHsgU29jaWFsVXNlciB9IGZyb20gJy4uL21vZGVscy9zb2NpYWwtdXNlcic7XG5cbmRlY2xhcmUgY29uc3QgZ2FwaTogYW55O1xuXG5leHBvcnQgY2xhc3MgR29vZ2xlUHJvdmlkZXIgZXh0ZW5kcyBPYXV0aFByb3ZpZGVyIHtcbiAgICBwcml2YXRlIF9nb29nbGVBdXRoOiBhbnk7XG5cbiAgICBjb25zdHJ1Y3Rvcihjb25maWc6IEdvb2dsZVByb3ZpZGVyQ29uZmlnKSB7XG4gICAgICAgIHN1cGVyKFByb3ZpZGVyLkdPT0dMRSwgJy8vYXBpcy5nb29nbGUuY29tL2pzL3BsYXRmb3JtLmpzJywgKCkgPT4ge1xuICAgICAgICAgICAgZ2FwaS5sb2FkKCdhdXRoMicsICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb25mID0gIWNvbmZpZy5zY29wZSA/IHsgLi4uY29uZmlnLCAuLi57IHNjb3BlOiAnZW1haWwnIH0gfSA6IGNvbmZpZztcbiAgICAgICAgICAgICAgICBnYXBpLmF1dGgyXG4gICAgICAgICAgICAgICAgICAgIC5pbml0KGNvbmYpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGF1dGggPT4gKHRoaXMuX2dvb2dsZUF1dGggPSBhdXRoKSlcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFNvbWV0aGluZyB3ZW50IHdyb25nIGR1cmluZyBpbml0aWFsaXphdGlvbjogJHtlcnIuZGV0YWlsc31gKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgbG9naW4oKTogT2JzZXJ2YWJsZTxTb2NpYWxVc2VyPiB7XG4gICAgICAgIHJldHVybiBmcm9tKHRoaXMuX2dvb2dsZUF1dGguc2lnbkluKHsgcHJvbXB0OiAnc2VsZWN0X2FjY291bnQnIH0pKS5waXBlKFxuICAgICAgICAgICAgbWFwKCgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBwcm9maWxlID0gdGhpcy5fZ29vZ2xlQXV0aC5jdXJyZW50VXNlci5nZXQoKS5nZXRCYXNpY1Byb2ZpbGUoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBhY2Nlc3NUb2tlbiA9IHRoaXMuX2dvb2dsZUF1dGguY3VycmVudFVzZXIuZ2V0KCkuZ2V0QXV0aFJlc3BvbnNlKHRydWUpLmFjY2Vzc190b2tlbjtcbiAgICAgICAgICAgICAgICBjb25zdCBpZFRva2VuID0gdGhpcy5fZ29vZ2xlQXV0aC5jdXJyZW50VXNlci5nZXQoKS5nZXRBdXRoUmVzcG9uc2UodHJ1ZSkuaWRfdG9rZW47XG5cbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBpZDogcHJvZmlsZS5nZXRJZCgpLFxuICAgICAgICAgICAgICAgICAgICBlbWFpbDogcHJvZmlsZS5nZXRFbWFpbCgpLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBwcm9maWxlLmdldE5hbWUoKSxcbiAgICAgICAgICAgICAgICAgICAgcHJvZmlsZUltZzogcHJvZmlsZS5nZXRJbWFnZVVybCgpLFxuICAgICAgICAgICAgICAgICAgICBhY2Nlc3NUb2tlbjogYWNjZXNzVG9rZW4sXG4gICAgICAgICAgICAgICAgICAgIGlkVG9rZW46IGlkVG9rZW5cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBsb2dvdXQoKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICAgICAgcmV0dXJuIE9ic2VydmFibGUuY3JlYXRlKG9ic2VydmVyID0+IG9ic2VydmVyLmNvbXBsZXRlKHRoaXMuX2dvb2dsZUF1dGguc2lnbk91dCgpKSk7XG4gICAgfVxufVxuIl19