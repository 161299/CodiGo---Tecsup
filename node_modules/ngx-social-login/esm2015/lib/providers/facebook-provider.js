/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { OauthProvider } from './oauth-provider';
import { Observable } from 'rxjs';
import { Provider } from '../models/provider';
export class FacebookProvider extends OauthProvider {
    /**
     * @param {?} _config
     */
    constructor(_config) {
        super(Provider.FACEBOOK, '//connect.facebook.net/en_US/sdk.js', () => {
            const /** @type {?} */ initConfig = this._config.initOptions;
            const /** @type {?} */ config = initConfig.version ? initConfig : Object.assign({}, initConfig, { version: 'v2.9' });
            FB.init(config);
        });
        this._config = _config;
    }
    /**
     * @return {?}
     */
    login() {
        return Observable.create(observer => {
            FB.login((response) => {
                if (response.authResponse) {
                    const /** @type {?} */ authResponse = response.authResponse;
                    FB.api('/me?fields=name,email,picture,first_name,last_name', (fbUser) => {
                        observer.complete(/** @type {?} */ ({
                            id: fbUser.id,
                            name: fbUser.name,
                            email: fbUser.email,
                            profileImg: `https://graph.facebook.com/${fbUser.id}/picture?type=normal`,
                            firstName: fbUser.first_name,
                            lastName: fbUser.last_name,
                            accessToken: authResponse.accessToken
                        }));
                    });
                }
            }, this._config.loginOptions);
        });
    }
    /**
     * @return {?}
     */
    logout() {
        return Observable.create(observer => observer.complete(FB.logout()));
    }
}
function FacebookProvider_tsickle_Closure_declarations() {
    /** @type {?} */
    FacebookProvider.prototype._config;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFjZWJvb2stcHJvdmlkZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtc29jaWFsLWxvZ2luLyIsInNvdXJjZXMiOlsibGliL3Byb3ZpZGVycy9mYWNlYm9vay1wcm92aWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFHbEMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBSTlDLE1BQU0sdUJBQXdCLFNBQVEsYUFBYTs7OztJQUMvQyxZQUFvQixPQUErQjtRQUMvQyxLQUFLLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxxQ0FBcUMsRUFBRSxHQUFHLEVBQUU7WUFDakUsdUJBQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDO1lBQzVDLHVCQUFNLE1BQU0sR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxtQkFBTSxVQUFVLEVBQUssRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLENBQUUsQ0FBQztZQUMzRixFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ25CLENBQUMsQ0FBQztRQUxhLFlBQU8sR0FBUCxPQUFPLENBQXdCO0tBTWxEOzs7O0lBRUQsS0FBSztRQUNELE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQ2hDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxRQUFhLEVBQUUsRUFBRTtnQkFDdkIsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7b0JBQ3hCLHVCQUFNLFlBQVksR0FBRyxRQUFRLENBQUMsWUFBWSxDQUFDO29CQUMzQyxFQUFFLENBQUMsR0FBRyxDQUFDLG9EQUFvRCxFQUFFLENBQUMsTUFBVyxFQUFFLEVBQUU7d0JBQ3pFLFFBQVEsQ0FBQyxRQUFRLG1CQUFDOzRCQUNkLEVBQUUsRUFBRSxNQUFNLENBQUMsRUFBRTs0QkFDYixJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUk7NEJBQ2pCLEtBQUssRUFBRSxNQUFNLENBQUMsS0FBSzs0QkFDbkIsVUFBVSxFQUFFLDhCQUE4QixNQUFNLENBQUMsRUFBRSxzQkFBc0I7NEJBQ3pFLFNBQVMsRUFBRSxNQUFNLENBQUMsVUFBVTs0QkFDNUIsUUFBUSxFQUFFLE1BQU0sQ0FBQyxTQUFTOzRCQUMxQixXQUFXLEVBQUUsWUFBWSxDQUFDLFdBQVc7eUJBQzFCLEVBQUMsQ0FBQztxQkFDcEIsQ0FBQyxDQUFDO2lCQUNOO2FBQ0osRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQ2pDLENBQUMsQ0FBQztLQUNOOzs7O0lBRUQsTUFBTTtRQUNGLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQ3hFO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYXV0aFByb3ZpZGVyIH0gZnJvbSAnLi9vYXV0aC1wcm92aWRlcic7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBGYWNlYm9va1Byb3ZpZGVyQ29uZmlnIH0gZnJvbSAnLi4vbW9kZWxzL2NvbmZpZy9mYWNlYm9vay1wcm92aWRlci1jb25maWcnO1xuaW1wb3J0IHsgU29jaWFsVXNlciB9IGZyb20gJy4uL21vZGVscy9zb2NpYWwtdXNlcic7XG5pbXBvcnQgeyBQcm92aWRlciB9IGZyb20gJy4uL21vZGVscy9wcm92aWRlcic7XG5cbmRlY2xhcmUgY29uc3QgRkI6IGFueTtcblxuZXhwb3J0IGNsYXNzIEZhY2Vib29rUHJvdmlkZXIgZXh0ZW5kcyBPYXV0aFByb3ZpZGVyIHtcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9jb25maWc6IEZhY2Vib29rUHJvdmlkZXJDb25maWcpIHtcbiAgICAgICAgc3VwZXIoUHJvdmlkZXIuRkFDRUJPT0ssICcvL2Nvbm5lY3QuZmFjZWJvb2submV0L2VuX1VTL3Nkay5qcycsICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGluaXRDb25maWcgPSB0aGlzLl9jb25maWcuaW5pdE9wdGlvbnM7XG4gICAgICAgICAgICBjb25zdCBjb25maWcgPSBpbml0Q29uZmlnLnZlcnNpb24gPyBpbml0Q29uZmlnIDogeyAuLi5pbml0Q29uZmlnLCAuLi57IHZlcnNpb246ICd2Mi45JyB9IH07XG4gICAgICAgICAgICBGQi5pbml0KGNvbmZpZyk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGxvZ2luKCk6IE9ic2VydmFibGU8U29jaWFsVXNlcj4ge1xuICAgICAgICByZXR1cm4gT2JzZXJ2YWJsZS5jcmVhdGUob2JzZXJ2ZXIgPT4ge1xuICAgICAgICAgICAgRkIubG9naW4oKHJlc3BvbnNlOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuYXV0aFJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGF1dGhSZXNwb25zZSA9IHJlc3BvbnNlLmF1dGhSZXNwb25zZTtcbiAgICAgICAgICAgICAgICAgICAgRkIuYXBpKCcvbWU/ZmllbGRzPW5hbWUsZW1haWwscGljdHVyZSxmaXJzdF9uYW1lLGxhc3RfbmFtZScsIChmYlVzZXI6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBmYlVzZXIuaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogZmJVc2VyLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW1haWw6IGZiVXNlci5lbWFpbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9maWxlSW1nOiBgaHR0cHM6Ly9ncmFwaC5mYWNlYm9vay5jb20vJHtmYlVzZXIuaWR9L3BpY3R1cmU/dHlwZT1ub3JtYWxgLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0TmFtZTogZmJVc2VyLmZpcnN0X25hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdE5hbWU6IGZiVXNlci5sYXN0X25hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjZXNzVG9rZW46IGF1dGhSZXNwb25zZS5hY2Nlc3NUb2tlblxuICAgICAgICAgICAgICAgICAgICAgICAgfSBhcyBTb2NpYWxVc2VyKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgdGhpcy5fY29uZmlnLmxvZ2luT3B0aW9ucyk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGxvZ291dCgpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgICAgICByZXR1cm4gT2JzZXJ2YWJsZS5jcmVhdGUob2JzZXJ2ZXIgPT4gb2JzZXJ2ZXIuY29tcGxldGUoRkIubG9nb3V0KCkpKTtcbiAgICB9XG59XG4iXX0=