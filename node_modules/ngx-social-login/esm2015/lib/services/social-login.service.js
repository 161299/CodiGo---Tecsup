/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Inject, Injectable } from '@angular/core';
import { EMPTY } from 'rxjs';
import { CONFIG } from '../models/config-injection-token';
import { FacebookProvider } from '../providers/facebook-provider';
import { GoogleProvider } from '../providers/google-provider';
import { Provider } from '../models/provider';
export class SocialLoginService {
    /**
     * @param {?} config
     */
    constructor(config) {
        this._providers = {};
        this._providers = Object.keys(config).reduce((obj, providerId) => {
            const /** @type {?} */ provider = Provider[providerId.toUpperCase()];
            obj[provider] = this.oauthProviderFactory(provider, config[providerId]);
            return obj;
        }, {});
    }
    /**
     * @param {?} provider
     * @return {?}
     */
    login(provider) {
        this._providerInUse = provider;
        const /** @type {?} */ oauthProvider = this._providers[provider];
        return oauthProvider ? oauthProvider.login() : EMPTY;
    }
    /**
     * @return {?}
     */
    logout() {
        const /** @type {?} */ oauthProvider = this._providers[this._providerInUse];
        return oauthProvider ? oauthProvider.logout() : EMPTY;
    }
    /**
     * @param {?} provider
     * @param {?} config
     * @return {?}
     */
    oauthProviderFactory(provider, config) {
        switch (provider) {
            case Provider.FACEBOOK:
                return new FacebookProvider(/** @type {?} */ (config));
            case Provider.GOOGLE:
                return new GoogleProvider(/** @type {?} */ (config));
        }
    }
}
SocialLoginService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
SocialLoginService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [CONFIG,] }] }
];
function SocialLoginService_tsickle_Closure_declarations() {
    /** @type {?} */
    SocialLoginService.prototype._providers;
    /** @type {?} */
    SocialLoginService.prototype._providerInUse;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29jaWFsLWxvZ2luLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtc29jaWFsLWxvZ2luLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3NvY2lhbC1sb2dpbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVuRCxPQUFPLEVBQWMsS0FBSyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRXpDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUMxRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUdsRSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDOUQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBSTlDLE1BQU07Ozs7SUFLRixZQUE0QixNQUFzQjswQkFKcUIsRUFBRTtRQUtyRSxJQUFJLENBQUMsVUFBVSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLFVBQVUsRUFBRSxFQUFFO1lBQzdELHVCQUFNLFFBQVEsR0FBRyxRQUFRLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7WUFDcEQsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7WUFDeEUsTUFBTSxDQUFDLEdBQUcsQ0FBQztTQUNkLEVBQUUsRUFBRSxDQUFDLENBQUM7S0FDVjs7Ozs7SUFFRCxLQUFLLENBQUMsUUFBa0I7UUFDcEIsSUFBSSxDQUFDLGNBQWMsR0FBRyxRQUFRLENBQUM7UUFDL0IsdUJBQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDaEQsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7S0FDeEQ7Ozs7SUFFRCxNQUFNO1FBQ0YsdUJBQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQzNELE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO0tBQ3pEOzs7Ozs7SUFFTyxvQkFBb0IsQ0FDeEIsUUFBa0IsRUFDbEIsTUFBcUQ7UUFFckQsTUFBTSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUNmLEtBQUssUUFBUSxDQUFDLFFBQVE7Z0JBQ2xCLE1BQU0sQ0FBQyxJQUFJLGdCQUFnQixtQkFBQyxNQUFnQyxFQUFDLENBQUM7WUFDbEUsS0FBSyxRQUFRLENBQUMsTUFBTTtnQkFDaEIsTUFBTSxDQUFDLElBQUksY0FBYyxtQkFBQyxNQUE4QixFQUFDLENBQUM7U0FDakU7Ozs7WUFsQ1IsVUFBVTs7Ozs0Q0FNTSxNQUFNLFNBQUMsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2F1dGhQcm92aWRlciB9IGZyb20gJy4uL3Byb3ZpZGVycy9vYXV0aC1wcm92aWRlcic7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBFTVBUWSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgUHJvdmlkZXJDb25maWcgfSBmcm9tICcuLi9tb2RlbHMvY29uZmlnL3Byb3ZpZGVyLWNvbmZpZyc7XG5pbXBvcnQgeyBDT05GSUcgfSBmcm9tICcuLi9tb2RlbHMvY29uZmlnLWluamVjdGlvbi10b2tlbic7XG5pbXBvcnQgeyBGYWNlYm9va1Byb3ZpZGVyIH0gZnJvbSAnLi4vcHJvdmlkZXJzL2ZhY2Vib29rLXByb3ZpZGVyJztcbmltcG9ydCB7IEZhY2Vib29rUHJvdmlkZXJDb25maWcgfSBmcm9tICcuLi9tb2RlbHMvY29uZmlnL2ZhY2Vib29rLXByb3ZpZGVyLWNvbmZpZyc7XG5pbXBvcnQgeyBHb29nbGVQcm92aWRlckNvbmZpZyB9IGZyb20gJy4uL21vZGVscy9jb25maWcvZ29vZ2xlLXByb3ZpZGVyLWNvbmZpZyc7XG5pbXBvcnQgeyBHb29nbGVQcm92aWRlciB9IGZyb20gJy4uL3Byb3ZpZGVycy9nb29nbGUtcHJvdmlkZXInO1xuaW1wb3J0IHsgUHJvdmlkZXIgfSBmcm9tICcuLi9tb2RlbHMvcHJvdmlkZXInO1xuaW1wb3J0IHsgU29jaWFsVXNlciB9IGZyb20gJy4uL21vZGVscy9zb2NpYWwtdXNlcic7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBTb2NpYWxMb2dpblNlcnZpY2Uge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgX3Byb3ZpZGVyczogeyBbcHJvdmlkZXJJZDogc3RyaW5nXTogT2F1dGhQcm92aWRlciB9ID0ge307XG5cbiAgICBwcml2YXRlIF9wcm92aWRlckluVXNlOiBQcm92aWRlcjtcblxuICAgIGNvbnN0cnVjdG9yKEBJbmplY3QoQ09ORklHKSBjb25maWc6IFByb3ZpZGVyQ29uZmlnKSB7XG4gICAgICAgIHRoaXMuX3Byb3ZpZGVycyA9IE9iamVjdC5rZXlzKGNvbmZpZykucmVkdWNlKChvYmosIHByb3ZpZGVySWQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHByb3ZpZGVyID0gUHJvdmlkZXJbcHJvdmlkZXJJZC50b1VwcGVyQ2FzZSgpXTtcbiAgICAgICAgICAgIG9ialtwcm92aWRlcl0gPSB0aGlzLm9hdXRoUHJvdmlkZXJGYWN0b3J5KHByb3ZpZGVyLCBjb25maWdbcHJvdmlkZXJJZF0pO1xuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfSwge30pO1xuICAgIH1cblxuICAgIGxvZ2luKHByb3ZpZGVyOiBQcm92aWRlcik6IE9ic2VydmFibGU8U29jaWFsVXNlcj4ge1xuICAgICAgICB0aGlzLl9wcm92aWRlckluVXNlID0gcHJvdmlkZXI7XG4gICAgICAgIGNvbnN0IG9hdXRoUHJvdmlkZXIgPSB0aGlzLl9wcm92aWRlcnNbcHJvdmlkZXJdO1xuICAgICAgICByZXR1cm4gb2F1dGhQcm92aWRlciA/IG9hdXRoUHJvdmlkZXIubG9naW4oKSA6IEVNUFRZO1xuICAgIH1cblxuICAgIGxvZ291dCgpOiBPYnNlcnZhYmxlPFNvY2lhbFVzZXI+IHtcbiAgICAgICAgY29uc3Qgb2F1dGhQcm92aWRlciA9IHRoaXMuX3Byb3ZpZGVyc1t0aGlzLl9wcm92aWRlckluVXNlXTtcbiAgICAgICAgcmV0dXJuIG9hdXRoUHJvdmlkZXIgPyBvYXV0aFByb3ZpZGVyLmxvZ291dCgpIDogRU1QVFk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvYXV0aFByb3ZpZGVyRmFjdG9yeShcbiAgICAgICAgcHJvdmlkZXI6IFByb3ZpZGVyLFxuICAgICAgICBjb25maWc6IEdvb2dsZVByb3ZpZGVyQ29uZmlnIHwgRmFjZWJvb2tQcm92aWRlckNvbmZpZ1xuICAgICk6IE9hdXRoUHJvdmlkZXIge1xuICAgICAgICBzd2l0Y2ggKHByb3ZpZGVyKSB7XG4gICAgICAgICAgICBjYXNlIFByb3ZpZGVyLkZBQ0VCT09LOlxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRmFjZWJvb2tQcm92aWRlcihjb25maWcgYXMgRmFjZWJvb2tQcm92aWRlckNvbmZpZyk7XG4gICAgICAgICAgICBjYXNlIFByb3ZpZGVyLkdPT0dMRTpcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEdvb2dsZVByb3ZpZGVyKGNvbmZpZyBhcyBHb29nbGVQcm92aWRlckNvbmZpZyk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=