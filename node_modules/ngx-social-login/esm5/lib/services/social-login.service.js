/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Inject, Injectable } from '@angular/core';
import { EMPTY } from 'rxjs';
import { CONFIG } from '../models/config-injection-token';
import { FacebookProvider } from '../providers/facebook-provider';
import { GoogleProvider } from '../providers/google-provider';
import { Provider } from '../models/provider';
var SocialLoginService = /** @class */ (function () {
    function SocialLoginService(config) {
        var _this = this;
        this._providers = {};
        this._providers = Object.keys(config).reduce(function (obj, providerId) {
            var /** @type {?} */ provider = Provider[providerId.toUpperCase()];
            obj[provider] = _this.oauthProviderFactory(provider, config[providerId]);
            return obj;
        }, {});
    }
    /**
     * @param {?} provider
     * @return {?}
     */
    SocialLoginService.prototype.login = /**
     * @param {?} provider
     * @return {?}
     */
    function (provider) {
        this._providerInUse = provider;
        var /** @type {?} */ oauthProvider = this._providers[provider];
        return oauthProvider ? oauthProvider.login() : EMPTY;
    };
    /**
     * @return {?}
     */
    SocialLoginService.prototype.logout = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ oauthProvider = this._providers[this._providerInUse];
        return oauthProvider ? oauthProvider.logout() : EMPTY;
    };
    /**
     * @param {?} provider
     * @param {?} config
     * @return {?}
     */
    SocialLoginService.prototype.oauthProviderFactory = /**
     * @param {?} provider
     * @param {?} config
     * @return {?}
     */
    function (provider, config) {
        switch (provider) {
            case Provider.FACEBOOK:
                return new FacebookProvider(/** @type {?} */ (config));
            case Provider.GOOGLE:
                return new GoogleProvider(/** @type {?} */ (config));
        }
    };
    SocialLoginService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    SocialLoginService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [CONFIG,] }] }
    ]; };
    return SocialLoginService;
}());
export { SocialLoginService };
function SocialLoginService_tsickle_Closure_declarations() {
    /** @type {?} */
    SocialLoginService.prototype._providers;
    /** @type {?} */
    SocialLoginService.prototype._providerInUse;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29jaWFsLWxvZ2luLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtc29jaWFsLWxvZ2luLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3NvY2lhbC1sb2dpbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVuRCxPQUFPLEVBQWMsS0FBSyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRXpDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUMxRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUdsRSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDOUQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLG9CQUFvQixDQUFDOztJQVMxQyw0QkFBNEIsTUFBc0I7UUFBbEQsaUJBTUM7MEJBVnNFLEVBQUU7UUFLckUsSUFBSSxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFDLEdBQUcsRUFBRSxVQUFVO1lBQ3pELHFCQUFNLFFBQVEsR0FBRyxRQUFRLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7WUFDcEQsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEtBQUksQ0FBQyxvQkFBb0IsQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7WUFDeEUsTUFBTSxDQUFDLEdBQUcsQ0FBQztTQUNkLEVBQUUsRUFBRSxDQUFDLENBQUM7S0FDVjs7Ozs7SUFFRCxrQ0FBSzs7OztJQUFMLFVBQU0sUUFBa0I7UUFDcEIsSUFBSSxDQUFDLGNBQWMsR0FBRyxRQUFRLENBQUM7UUFDL0IscUJBQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDaEQsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7S0FDeEQ7Ozs7SUFFRCxtQ0FBTTs7O0lBQU47UUFDSSxxQkFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDM0QsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7S0FDekQ7Ozs7OztJQUVPLGlEQUFvQjs7Ozs7Y0FDeEIsUUFBa0IsRUFDbEIsTUFBcUQ7UUFFckQsTUFBTSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUNmLEtBQUssUUFBUSxDQUFDLFFBQVE7Z0JBQ2xCLE1BQU0sQ0FBQyxJQUFJLGdCQUFnQixtQkFBQyxNQUFnQyxFQUFDLENBQUM7WUFDbEUsS0FBSyxRQUFRLENBQUMsTUFBTTtnQkFDaEIsTUFBTSxDQUFDLElBQUksY0FBYyxtQkFBQyxNQUE4QixFQUFDLENBQUM7U0FDakU7OztnQkFsQ1IsVUFBVTs7OztnREFNTSxNQUFNLFNBQUMsTUFBTTs7NkJBbEI5Qjs7U0FhYSxrQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9hdXRoUHJvdmlkZXIgfSBmcm9tICcuLi9wcm92aWRlcnMvb2F1dGgtcHJvdmlkZXInO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgRU1QVFkgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFByb3ZpZGVyQ29uZmlnIH0gZnJvbSAnLi4vbW9kZWxzL2NvbmZpZy9wcm92aWRlci1jb25maWcnO1xuaW1wb3J0IHsgQ09ORklHIH0gZnJvbSAnLi4vbW9kZWxzL2NvbmZpZy1pbmplY3Rpb24tdG9rZW4nO1xuaW1wb3J0IHsgRmFjZWJvb2tQcm92aWRlciB9IGZyb20gJy4uL3Byb3ZpZGVycy9mYWNlYm9vay1wcm92aWRlcic7XG5pbXBvcnQgeyBGYWNlYm9va1Byb3ZpZGVyQ29uZmlnIH0gZnJvbSAnLi4vbW9kZWxzL2NvbmZpZy9mYWNlYm9vay1wcm92aWRlci1jb25maWcnO1xuaW1wb3J0IHsgR29vZ2xlUHJvdmlkZXJDb25maWcgfSBmcm9tICcuLi9tb2RlbHMvY29uZmlnL2dvb2dsZS1wcm92aWRlci1jb25maWcnO1xuaW1wb3J0IHsgR29vZ2xlUHJvdmlkZXIgfSBmcm9tICcuLi9wcm92aWRlcnMvZ29vZ2xlLXByb3ZpZGVyJztcbmltcG9ydCB7IFByb3ZpZGVyIH0gZnJvbSAnLi4vbW9kZWxzL3Byb3ZpZGVyJztcbmltcG9ydCB7IFNvY2lhbFVzZXIgfSBmcm9tICcuLi9tb2RlbHMvc29jaWFsLXVzZXInO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgU29jaWFsTG9naW5TZXJ2aWNlIHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9wcm92aWRlcnM6IHsgW3Byb3ZpZGVySWQ6IHN0cmluZ106IE9hdXRoUHJvdmlkZXIgfSA9IHt9O1xuXG4gICAgcHJpdmF0ZSBfcHJvdmlkZXJJblVzZTogUHJvdmlkZXI7XG5cbiAgICBjb25zdHJ1Y3RvcihASW5qZWN0KENPTkZJRykgY29uZmlnOiBQcm92aWRlckNvbmZpZykge1xuICAgICAgICB0aGlzLl9wcm92aWRlcnMgPSBPYmplY3Qua2V5cyhjb25maWcpLnJlZHVjZSgob2JqLCBwcm92aWRlcklkKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBwcm92aWRlciA9IFByb3ZpZGVyW3Byb3ZpZGVySWQudG9VcHBlckNhc2UoKV07XG4gICAgICAgICAgICBvYmpbcHJvdmlkZXJdID0gdGhpcy5vYXV0aFByb3ZpZGVyRmFjdG9yeShwcm92aWRlciwgY29uZmlnW3Byb3ZpZGVySWRdKTtcbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH0sIHt9KTtcbiAgICB9XG5cbiAgICBsb2dpbihwcm92aWRlcjogUHJvdmlkZXIpOiBPYnNlcnZhYmxlPFNvY2lhbFVzZXI+IHtcbiAgICAgICAgdGhpcy5fcHJvdmlkZXJJblVzZSA9IHByb3ZpZGVyO1xuICAgICAgICBjb25zdCBvYXV0aFByb3ZpZGVyID0gdGhpcy5fcHJvdmlkZXJzW3Byb3ZpZGVyXTtcbiAgICAgICAgcmV0dXJuIG9hdXRoUHJvdmlkZXIgPyBvYXV0aFByb3ZpZGVyLmxvZ2luKCkgOiBFTVBUWTtcbiAgICB9XG5cbiAgICBsb2dvdXQoKTogT2JzZXJ2YWJsZTxTb2NpYWxVc2VyPiB7XG4gICAgICAgIGNvbnN0IG9hdXRoUHJvdmlkZXIgPSB0aGlzLl9wcm92aWRlcnNbdGhpcy5fcHJvdmlkZXJJblVzZV07XG4gICAgICAgIHJldHVybiBvYXV0aFByb3ZpZGVyID8gb2F1dGhQcm92aWRlci5sb2dvdXQoKSA6IEVNUFRZO1xuICAgIH1cblxuICAgIHByaXZhdGUgb2F1dGhQcm92aWRlckZhY3RvcnkoXG4gICAgICAgIHByb3ZpZGVyOiBQcm92aWRlcixcbiAgICAgICAgY29uZmlnOiBHb29nbGVQcm92aWRlckNvbmZpZyB8IEZhY2Vib29rUHJvdmlkZXJDb25maWdcbiAgICApOiBPYXV0aFByb3ZpZGVyIHtcbiAgICAgICAgc3dpdGNoIChwcm92aWRlcikge1xuICAgICAgICAgICAgY2FzZSBQcm92aWRlci5GQUNFQk9PSzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEZhY2Vib29rUHJvdmlkZXIoY29uZmlnIGFzIEZhY2Vib29rUHJvdmlkZXJDb25maWcpO1xuICAgICAgICAgICAgY2FzZSBQcm92aWRlci5HT09HTEU6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBHb29nbGVQcm92aWRlcihjb25maWcgYXMgR29vZ2xlUHJvdmlkZXJDb25maWcpO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19