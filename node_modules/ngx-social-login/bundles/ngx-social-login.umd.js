(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('ngx-social-login', ['exports', '@angular/core', 'rxjs', 'rxjs/operators'], factory) :
    (factory((global['ngx-social-login'] = {}),global.ng.core,global.rxjs,global.rxjs.operators));
}(this, (function (exports,core,rxjs,operators) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ CONFIG = new core.InjectionToken('providers configuration');

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @abstract
     */
    var /**
     * @abstract
     */ OauthProvider = (function () {
        function OauthProvider(provider, src, onload, async) {
            if (async === void 0) {
                async = true;
            }
            this.ID_PREFIX = 'social-login__';
            var /** @type {?} */ id = this.ID_PREFIX + provider;
            if (document.getElementById(id)) {
                return;
            }
            var /** @type {?} */ script = document.createElement('script');
            script.id = id;
            script.async = async;
            script.src = src;
            script.onload = onload;
            script.defer = true;
            document.head.appendChild(script);
        }
        return OauthProvider;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @enum {string} */
    var Provider = {
        FACEBOOK: 'facebook',
        GOOGLE: 'google',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var FacebookProvider = (function (_super) {
        __extends(FacebookProvider, _super);
        function FacebookProvider(_config) {
            var _this = _super.call(this, Provider.FACEBOOK, '//connect.facebook.net/en_US/sdk.js', function () {
                var /** @type {?} */ initConfig = _this._config.initOptions;
                var /** @type {?} */ config = initConfig.version ? initConfig : __assign({}, initConfig, { version: 'v2.9' });
                FB.init(config);
            }) || this;
            _this._config = _config;
            return _this;
        }
        /**
         * @return {?}
         */
        FacebookProvider.prototype.login = /**
         * @return {?}
         */
            function () {
                var _this = this;
                return rxjs.Observable.create(function (observer) {
                    FB.login(function (response) {
                        if (response.authResponse) {
                            var /** @type {?} */ authResponse_1 = response.authResponse;
                            FB.api('/me?fields=name,email,picture,first_name,last_name', function (fbUser) {
                                observer.complete(/** @type {?} */ ({
                                    id: fbUser.id,
                                    name: fbUser.name,
                                    email: fbUser.email,
                                    profileImg: "https://graph.facebook.com/" + fbUser.id + "/picture?type=normal",
                                    firstName: fbUser.first_name,
                                    lastName: fbUser.last_name,
                                    accessToken: authResponse_1.accessToken
                                }));
                            });
                        }
                    }, _this._config.loginOptions);
                });
            };
        /**
         * @return {?}
         */
        FacebookProvider.prototype.logout = /**
         * @return {?}
         */
            function () {
                return rxjs.Observable.create(function (observer) { return observer.complete(FB.logout()); });
            };
        return FacebookProvider;
    }(OauthProvider));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var GoogleProvider = (function (_super) {
        __extends(GoogleProvider, _super);
        function GoogleProvider(config) {
            var _this = _super.call(this, Provider.GOOGLE, '//apis.google.com/js/platform.js', function () {
                gapi.load('auth2', function () {
                    var /** @type {?} */ conf = !config.scope ? __assign({}, config, { scope: 'email' }) : config;
                    gapi.auth2
                        .init(conf)
                        .then(function (auth) { return (_this._googleAuth = auth); })
                        .catch(function (err) {
                        throw new Error("Something went wrong during initialization: " + err.details);
                    });
                });
            }) || this;
            return _this;
        }
        /**
         * @return {?}
         */
        GoogleProvider.prototype.login = /**
         * @return {?}
         */
            function () {
                var _this = this;
                return rxjs.from(this._googleAuth.signIn({ prompt: 'select_account' })).pipe(operators.map(function () {
                    var /** @type {?} */ profile = _this._googleAuth.currentUser.get().getBasicProfile();
                    var /** @type {?} */ accessToken = _this._googleAuth.currentUser.get().getAuthResponse(true).access_token;
                    var /** @type {?} */ idToken = _this._googleAuth.currentUser.get().getAuthResponse(true).id_token;
                    return {
                        id: profile.getId(),
                        email: profile.getEmail(),
                        name: profile.getName(),
                        profileImg: profile.getImageUrl(),
                        accessToken: accessToken,
                        idToken: idToken
                    };
                }));
            };
        /**
         * @return {?}
         */
        GoogleProvider.prototype.logout = /**
         * @return {?}
         */
            function () {
                var _this = this;
                return rxjs.Observable.create(function (observer) { return observer.complete(_this._googleAuth.signOut()); });
            };
        return GoogleProvider;
    }(OauthProvider));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var SocialLoginService = (function () {
        function SocialLoginService(config) {
            var _this = this;
            this._providers = {};
            this._providers = Object.keys(config).reduce(function (obj, providerId) {
                var /** @type {?} */ provider = Provider[providerId.toUpperCase()];
                obj[provider] = _this.oauthProviderFactory(provider, config[providerId]);
                return obj;
            }, {});
        }
        /**
         * @param {?} provider
         * @return {?}
         */
        SocialLoginService.prototype.login = /**
         * @param {?} provider
         * @return {?}
         */
            function (provider) {
                this._providerInUse = provider;
                var /** @type {?} */ oauthProvider = this._providers[provider];
                return oauthProvider ? oauthProvider.login() : rxjs.EMPTY;
            };
        /**
         * @return {?}
         */
        SocialLoginService.prototype.logout = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ oauthProvider = this._providers[this._providerInUse];
                return oauthProvider ? oauthProvider.logout() : rxjs.EMPTY;
            };
        /**
         * @param {?} provider
         * @param {?} config
         * @return {?}
         */
        SocialLoginService.prototype.oauthProviderFactory = /**
         * @param {?} provider
         * @param {?} config
         * @return {?}
         */
            function (provider, config) {
                switch (provider) {
                    case Provider.FACEBOOK:
                        return new FacebookProvider(/** @type {?} */ (config));
                    case Provider.GOOGLE:
                        return new GoogleProvider(/** @type {?} */ (config));
                }
            };
        SocialLoginService.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        SocialLoginService.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Inject, args: [CONFIG,] }] }
            ];
        };
        return SocialLoginService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NgxSocialLoginModule = (function () {
        function NgxSocialLoginModule() {
        }
        /**
         * @param {?} config
         * @return {?}
         */
        NgxSocialLoginModule.init = /**
         * @param {?} config
         * @return {?}
         */
            function (config) {
                return {
                    ngModule: NgxSocialLoginModule,
                    providers: [
                        { provide: CONFIG, useValue: config }
                    ]
                };
            };
        NgxSocialLoginModule.decorators = [
            { type: core.NgModule, args: [{
                        providers: [SocialLoginService]
                    },] },
        ];
        return NgxSocialLoginModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.SocialLoginService = SocialLoginService;
    exports.NgxSocialLoginModule = NgxSocialLoginModule;
    exports.Provider = Provider;
    exports.ɵa = CONFIG;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,